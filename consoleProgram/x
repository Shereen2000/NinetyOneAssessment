using System;
using System.IO;

class Program
{
    public static void Main()
    {
        // Ask for the file path
        Console.WriteLine("Enter the path of the CSV file");
        string? filePath = Console.ReadLine();

        try
        {
            // Read all lines from the file
            string[] lines = File.ReadAllLines(filePath);

            // Initialize the students array with the number of lines (excluding the header)
            Student[] students = new Student[lines.Length - 1];

            // Loop through the lines starting from index 1 to skip the header
            for (int i = 1; i < lines.Length; i++)
            {
                string line = lines[i];

                int firstCommaIndex = line.IndexOf(',');
                int secondCommaIndex = line.LastIndexOf(',');

                // Extract name, surname, and score using Substring
                string name = line.Substring(0, firstCommaIndex).Trim();
                string surname = line.Substring(firstCommaIndex + 1, secondCommaIndex - firstCommaIndex - 1).Trim();
                string score = line.Substring(secondCommaIndex + 1).Trim();

                // Parse the score into an integer and create a new Student object
                students[i - 1] = new Student(
                    name,
                    surname,
                    int.Parse(score) // Convert score string to integer
                );
            }

            // Sort the students array first by Score (descending) and then by Surname, Name (alphabetical order)
            Array.Sort(students, (s1, s2) =>
            {
                // First compare by Score in descending order
                int scoreComparison = s2.Score.CompareTo(s1.Score);

                // If Scores are equal, compare by Surname, then by Name alphabetically
                if (scoreComparison == 0)
                {
                    int surnameComparison = s1.Surname.CompareTo(s2.Surname);
                    if (surnameComparison == 0)
                    {
                        return s1.Name.CompareTo(s2.Name); // Compare by Name if Surnames are the same
                    }
                    return surnameComparison; // Compare by Surname
                }

                return scoreComparison; // Return comparison result by Score
            });

            // Print the sorted students' details
            foreach (Student s in students)
            {
                Console.WriteLine($"{s.Name} {s.Surname}, Score: {s.Score}");
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions (e.g., file not found, invalid format)
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}

public class Student
{
    public string Name { get; set; }
    public string Surname { get; set; }
    public int Score { get; set; }

    public Student(string name, string surname, int score)
    {
        this.Name = name;
        this.Surname = surname;
        this.Score = score;
    }
}
